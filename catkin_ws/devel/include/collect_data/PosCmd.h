// Generated by gencpp from file collect_data/PosCmd.msg
// DO NOT EDIT!


#ifndef COLLECT_DATA_MESSAGE_POSCMD_H
#define COLLECT_DATA_MESSAGE_POSCMD_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace collect_data
{
template <class ContainerAllocator>
struct PosCmd_
{
  typedef PosCmd_<ContainerAllocator> Type;

  PosCmd_()
    : x(0.0)
    , y(0.0)
    , z(0.0)
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)
    , gripper(0.0)
    , quater_x(0.0)
    , quater_y(0.0)
    , quater_z(0.0)
    , quater_w(0.0)
    , chx(0.0)
    , chy(0.0)
    , chz(0.0)
    , vel_l(0.0)
    , vel_r(0.0)
    , height(0.0)
    , head_pit(0.0)
    , head_yaw(0.0)
    , tempFloatData()
    , tempIntData()
    , mode1(0)
    , mode2(0)
    , timeCount(0)  {
      tempFloatData.assign(0.0);

      tempIntData.assign(0);
  }
  PosCmd_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , z(0.0)
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)
    , gripper(0.0)
    , quater_x(0.0)
    , quater_y(0.0)
    , quater_z(0.0)
    , quater_w(0.0)
    , chx(0.0)
    , chy(0.0)
    , chz(0.0)
    , vel_l(0.0)
    , vel_r(0.0)
    , height(0.0)
    , head_pit(0.0)
    , head_yaw(0.0)
    , tempFloatData()
    , tempIntData()
    , mode1(0)
    , mode2(0)
    , timeCount(0)  {
  (void)_alloc;
      tempFloatData.assign(0.0);

      tempIntData.assign(0);
  }



   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _z_type;
  _z_type z;

   typedef double _roll_type;
  _roll_type roll;

   typedef double _pitch_type;
  _pitch_type pitch;

   typedef double _yaw_type;
  _yaw_type yaw;

   typedef double _gripper_type;
  _gripper_type gripper;

   typedef double _quater_x_type;
  _quater_x_type quater_x;

   typedef double _quater_y_type;
  _quater_y_type quater_y;

   typedef double _quater_z_type;
  _quater_z_type quater_z;

   typedef double _quater_w_type;
  _quater_w_type quater_w;

   typedef double _chx_type;
  _chx_type chx;

   typedef double _chy_type;
  _chy_type chy;

   typedef double _chz_type;
  _chz_type chz;

   typedef double _vel_l_type;
  _vel_l_type vel_l;

   typedef double _vel_r_type;
  _vel_r_type vel_r;

   typedef double _height_type;
  _height_type height;

   typedef double _head_pit_type;
  _head_pit_type head_pit;

   typedef double _head_yaw_type;
  _head_yaw_type head_yaw;

   typedef boost::array<double, 6>  _tempFloatData_type;
  _tempFloatData_type tempFloatData;

   typedef boost::array<int32_t, 6>  _tempIntData_type;
  _tempIntData_type tempIntData;

   typedef int32_t _mode1_type;
  _mode1_type mode1;

   typedef int32_t _mode2_type;
  _mode2_type mode2;

   typedef int32_t _timeCount_type;
  _timeCount_type timeCount;





  typedef boost::shared_ptr< ::collect_data::PosCmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::collect_data::PosCmd_<ContainerAllocator> const> ConstPtr;

}; // struct PosCmd_

typedef ::collect_data::PosCmd_<std::allocator<void> > PosCmd;

typedef boost::shared_ptr< ::collect_data::PosCmd > PosCmdPtr;
typedef boost::shared_ptr< ::collect_data::PosCmd const> PosCmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::collect_data::PosCmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::collect_data::PosCmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::collect_data::PosCmd_<ContainerAllocator1> & lhs, const ::collect_data::PosCmd_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.roll == rhs.roll &&
    lhs.pitch == rhs.pitch &&
    lhs.yaw == rhs.yaw &&
    lhs.gripper == rhs.gripper &&
    lhs.quater_x == rhs.quater_x &&
    lhs.quater_y == rhs.quater_y &&
    lhs.quater_z == rhs.quater_z &&
    lhs.quater_w == rhs.quater_w &&
    lhs.chx == rhs.chx &&
    lhs.chy == rhs.chy &&
    lhs.chz == rhs.chz &&
    lhs.vel_l == rhs.vel_l &&
    lhs.vel_r == rhs.vel_r &&
    lhs.height == rhs.height &&
    lhs.head_pit == rhs.head_pit &&
    lhs.head_yaw == rhs.head_yaw &&
    lhs.tempFloatData == rhs.tempFloatData &&
    lhs.tempIntData == rhs.tempIntData &&
    lhs.mode1 == rhs.mode1 &&
    lhs.mode2 == rhs.mode2 &&
    lhs.timeCount == rhs.timeCount;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::collect_data::PosCmd_<ContainerAllocator1> & lhs, const ::collect_data::PosCmd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace collect_data

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::collect_data::PosCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::collect_data::PosCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::collect_data::PosCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::collect_data::PosCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::collect_data::PosCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::collect_data::PosCmd_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::collect_data::PosCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "df5f2abbfa9e683f82c8a2751cdc09f0";
  }

  static const char* value(const ::collect_data::PosCmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdf5f2abbfa9e683fULL;
  static const uint64_t static_value2 = 0x82c8a2751cdc09f0ULL;
};

template<class ContainerAllocator>
struct DataType< ::collect_data::PosCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "collect_data/PosCmd";
  }

  static const char* value(const ::collect_data::PosCmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::collect_data::PosCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 roll\n"
"float64 pitch\n"
"float64 yaw\n"
"float64 gripper\n"
"float64 quater_x\n"
"float64 quater_y\n"
"float64 quater_z\n"
"float64 quater_w\n"
"float64 chx\n"
"float64 chy\n"
"float64 chz\n"
"float64 vel_l\n"
"float64 vel_r\n"
"float64 height\n"
"float64 head_pit\n"
"float64 head_yaw\n"
"float64[6] tempFloatData\n"
"int32[6] tempIntData\n"
"int32 mode1\n"
"int32 mode2\n"
"int32 timeCount\n"
;
  }

  static const char* value(const ::collect_data::PosCmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::collect_data::PosCmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.roll);
      stream.next(m.pitch);
      stream.next(m.yaw);
      stream.next(m.gripper);
      stream.next(m.quater_x);
      stream.next(m.quater_y);
      stream.next(m.quater_z);
      stream.next(m.quater_w);
      stream.next(m.chx);
      stream.next(m.chy);
      stream.next(m.chz);
      stream.next(m.vel_l);
      stream.next(m.vel_r);
      stream.next(m.height);
      stream.next(m.head_pit);
      stream.next(m.head_yaw);
      stream.next(m.tempFloatData);
      stream.next(m.tempIntData);
      stream.next(m.mode1);
      stream.next(m.mode2);
      stream.next(m.timeCount);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PosCmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::collect_data::PosCmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::collect_data::PosCmd_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<double>::stream(s, indent + "  ", v.z);
    s << indent << "roll: ";
    Printer<double>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<double>::stream(s, indent + "  ", v.pitch);
    s << indent << "yaw: ";
    Printer<double>::stream(s, indent + "  ", v.yaw);
    s << indent << "gripper: ";
    Printer<double>::stream(s, indent + "  ", v.gripper);
    s << indent << "quater_x: ";
    Printer<double>::stream(s, indent + "  ", v.quater_x);
    s << indent << "quater_y: ";
    Printer<double>::stream(s, indent + "  ", v.quater_y);
    s << indent << "quater_z: ";
    Printer<double>::stream(s, indent + "  ", v.quater_z);
    s << indent << "quater_w: ";
    Printer<double>::stream(s, indent + "  ", v.quater_w);
    s << indent << "chx: ";
    Printer<double>::stream(s, indent + "  ", v.chx);
    s << indent << "chy: ";
    Printer<double>::stream(s, indent + "  ", v.chy);
    s << indent << "chz: ";
    Printer<double>::stream(s, indent + "  ", v.chz);
    s << indent << "vel_l: ";
    Printer<double>::stream(s, indent + "  ", v.vel_l);
    s << indent << "vel_r: ";
    Printer<double>::stream(s, indent + "  ", v.vel_r);
    s << indent << "height: ";
    Printer<double>::stream(s, indent + "  ", v.height);
    s << indent << "head_pit: ";
    Printer<double>::stream(s, indent + "  ", v.head_pit);
    s << indent << "head_yaw: ";
    Printer<double>::stream(s, indent + "  ", v.head_yaw);
    s << indent << "tempFloatData[]" << std::endl;
    for (size_t i = 0; i < v.tempFloatData.size(); ++i)
    {
      s << indent << "  tempFloatData[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.tempFloatData[i]);
    }
    s << indent << "tempIntData[]" << std::endl;
    for (size_t i = 0; i < v.tempIntData.size(); ++i)
    {
      s << indent << "  tempIntData[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.tempIntData[i]);
    }
    s << indent << "mode1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.mode1);
    s << indent << "mode2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.mode2);
    s << indent << "timeCount: ";
    Printer<int32_t>::stream(s, indent + "  ", v.timeCount);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COLLECT_DATA_MESSAGE_POSCMD_H
